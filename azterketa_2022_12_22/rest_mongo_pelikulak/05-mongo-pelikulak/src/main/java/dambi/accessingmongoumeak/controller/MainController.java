package dambi.accessingmongoumeak.controller;

import java.util.List;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import dambi.accessingmongoumeak.model.Director;
import dambi.accessingmongoumeak.model.Pelikula;
import dambi.accessingmongoumeak.model.PelikulaRepository;

@RestController // This means that this class is a Controller baina @Controller bakarrik
				// jarrita, PUT eta DELETEak ez dabiz
@RequestMapping(path = "/pelikulak") // This means URL's start with /demo (after Application path)
public class MainController {
	@Autowired // This means to get the bean called umeaRepository
				// Which is auto-generated by Spring, we will use it to handle the data
	private PelikulaRepository pelikulaRepository;


	@GetMapping(path = "/peliGuztiak")
	public @ResponseBody Iterable<Pelikula> getPelikulak() {
		// This returns a JSON or XML with the users
		return pelikulaRepository.peliGuztiak();
	}

	// --------
	@GetMapping(path = "/peliById/{id}")
	public @ResponseBody Pelikula peliById(@Valid @RequestParam int id) {
		// This returns a JSON or XML with the users
		Pelikula pelikula_Ida = pelikulaRepository.peliById(id);

		return pelikula_Ida;
	}

	// peliculas del actor
	@GetMapping(path = "/aktorearenak/{aktorea}")
	public @ResponseBody List<Pelikula> peliculas_Actor(@Valid @RequestParam String aktorea) {
		// This returns a JSON or XML with the users
		List<Pelikula> pelikula_zerrenda = pelikulaRepository.aktorearenak(aktorea);

		return pelikula_zerrenda;
	}

	// berriagoak
	@GetMapping(path = "/berriagoak/{urtea}")
	public @ResponseBody List<Pelikula> berriagoak(@Valid @RequestParam int urtea) {
		// This returns a JSON or XML with the users

		List<Pelikula> pelikulak_Urtearen_Arabera = pelikulaRepository.berriagoak(urtea);

		return pelikulak_Urtearen_Arabera;
	}

	// zuzendariarenak
	@GetMapping(path = "/zuzendariarenak/{zuzendaria}")
	public @ResponseBody List<Pelikula> zuzendariarenak(@Valid @RequestParam String zuzendaria) {
		// This returns a JSON or XML with the users
		List<Pelikula> zuzendariaren_Pelikulak = pelikulaRepository.zuzendariarenak(zuzendaria);

		return zuzendariaren_Pelikulak;
	}

	// zuzendariak
	@GetMapping(path = "/zuzendariak")
	public @ResponseBody List<Director> zuzendariak() {
		// This returns a JSON or XML with the users
		List<Director> director_Zerrenda = pelikulaRepository.zuzendariak();

		return director_Zerrenda;
	}

	// peliberria
	@PostMapping(path = "/peliberria")
	public @ResponseBody String addNewPelikula(@RequestParam String title, @PathVariable int year, @RequestParam Director Director, @RequestParam List<String> Cast) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		Pelikula p = new Pelikula();
		p.setTitle(title);
		p.setYear(year);
		p.setDirector(Director);
		p.setCast(Cast);
		pelikulaRepository.peliBerria(p);
		return "Saved";
	}

	@PostMapping(path = "/kastinaOsatzen")
	public ResponseEntity<Pelikula> kastinaOsatzen(@Valid @RequestBody Pelikula user, @PathVariable int pelikula_Id, @PathVariable String aktorea_izena) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		try {
			Pelikula pelikula = pelikulaRepository.peliById(pelikula_Id);
			List<String> cast = pelikula.getCast();
			cast.add(aktorea_izena);
			pelikula.setCast(cast);
			pelikulaRepository.peliBerria(pelikula);

			return ResponseEntity.ok().build();

		} catch (Exception ex) {
			return ResponseEntity.notFound().build();
		}
	}


	@DeleteMapping(path = "/delete/{id}")
	public ResponseEntity<Void> delete(@PathVariable int id) {
		try {
			long zenbat = pelikulaRepository.delete(id);

			if (zenbat > 0) {
				System.out.println("'" + id + "' daukan pelikula datu-basetik ezabatua izan da. ");
			} else {
				System.out.println("Ez dago '" + id + "' id-a daukan pelikularik");
			}

			return ResponseEntity.ok().build();

		} catch (Exception ex) {
			System.out.println("Errorea pelikula ezabatzerakoan. ");
			return ResponseEntity.notFound().build();
		}
	}   



	
}