package dambi.accessingrelationaldata;

import java.util.Optional;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;
import org.springdoc.core.RequestBodyInfo;
import org.springframework.*;

import io.swagger.v3.oas.annotations.parameters.RequestBody;

@RestController // This means that this class is a Controller
@RequestMapping(path = "/demo") // This means URL's start with /demo (after Application path)
public class MainController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    @PostMapping(path = "/add") // Map ONLY POST Requests
    public @ResponseBody String addNewUser(@RequestParam String name, @RequestParam String email) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        User n = new User();
        n.setName(name);
        n.setEmail(email);
        userRepository.save(n);
        return "Saved";
    }

    @GetMapping(path = "/all")
    public @ResponseBody Iterable<User> getAllUsers() {
        // This returns a JSON or XML with the users
        return userRepository.findAll();
    }

	
	@GetMapping(path = "/bat")
    public @ResponseBody Optional<User> getErabiltzaileBat(int userId) {
        // This returns a JSON or XML with the users
        return userRepository.findById(userId);
    }



	// public ResponseEntity updateUser(@Valid @RequestBody User user, @PathVariable int userId, @RequestParam String name, @RequestParam String email) {
	@PutMapping(value = "/update/{userId}")
	public ResponseEntity updateContact(@Valid @RequestBody User user, @PathVariable int userId) {
		try {
			user.setId(userId);
            // user.setName(user.getName());
            // user.setEmail(user.getEmail());
			userRepository.save(user);

			return ResponseEntity.ok().build();

		} catch (Exception ex) {
			return ResponseEntity.notFound().build();
		}
	}


    // @PutMapping(path = "/update/{userId}")
	// public ResponseEntity<User> updateContact(@Valid @PathVariable int userId, @RequestBody User user) {
	// // public ResponseEntity updateContact(@Valid @RequestBody User user, @PathVariable int userId, @PathVariable String userName, @PathVariable String userMail) {
	// 	try {
	// 		user.setId(userId);
	// 		// user.setName();
	// 		// user.setName(user.getName());
	// 		// user.setEmail(userMail);
	// 		userRepository.save(user);

	// 		return ResponseEntity.ok().build();

	// 	} catch (Exception ex) {
	// 		return ResponseEntity.notFound().build();
	// 	}
	// }


	@DeleteMapping(path = "/delete/{userId}")
	public ResponseEntity deleteUserById(@PathVariable int userId) {
		try {
			userRepository.deleteById(userId);
			return ResponseEntity.ok().build();

		} catch (Exception ex) {
			System.out.println("Errorea " + userId + " userra ezabatzerakoan. ");
			return ResponseEntity.notFound().build();

		}
	}
	
	
}